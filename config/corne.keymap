/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

&lt {
    tapping-term-ms = <185>;
};

&nice_view_spi {
    cs-gpios = <&pro_micro 16 GPIO_ACTIVE_HIGH>;
};

/ {
    macros {
        e_acc: e_acc {
            label = "ZM_e_acc";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp RA(E) &kp E>;
        };
        e_acc_g: e_acc_g {
            label = "ZM_e_acc_g";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp RA(GRAVE) &kp E>;
        };
        a_acc: a_acc {
            label = "ZM_a_acc";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp RA(GRAVE) &kp A>;
        };
        u_acc: u_acc {
            label = "ZM_u_acc";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp RA(GRAVE) &kp U>;
        };
        arrow: arrow {
            label = "ZM_arrow";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp EQUAL &kp GT>;
        };
    };

    behaviors {
        esc_shift: esc_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "ESC_SHIFT";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        tde: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_1";
            #binding-cells = <0>;
            tapping-term-ms = <175>;
            bindings = <&kp E>, <&e_acc>, <&e_acc_g>;
        };

        td2: tap_dance_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp SEMI>, <&kp LS(SEMI)>;
        };

        tda: tap_dance_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_3";
            #binding-cells = <0>;
            tapping-term-ms = <175>;
            bindings = <&kp A>, <&a_acc>;
        };

        tdu: tap_dance_4 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_4";
            #binding-cells = <0>;
            tapping-term-ms = <175>;
            bindings = <&kp U>, <&u_acc>;
        };

        tdeq: tap_dance_5 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_5";
            #binding-cells = <0>;
            tapping-term-ms = <175>;
            bindings = <&kp EQUAL>, <&arrow>;
        };

        c_m: comma_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_MORPH";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp LEFT>;
            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };

        semi_morph: semi_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "SEMI_MORPH";
            #binding-cells = <0>;
            bindings = <&kp COLON>, <&kp SEMI>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // --------------------------------------   -------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP   |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  :  | ENT    |
            // | SHFT |     |  Z  |  X  |  C  |  V  |   |  B  |  N   |  M  |  ,  |  .  | RIGHT  |
            //                    | GUI | CMD | SPC |   | SPC | RSE  | ALT |
            bindings = <
                &kp TAB              &kp Q      &kp W        &tde         &kp R      &kp T    &kp Y  &tdu      &kp I     &kp O      &kp P        &kp BSPC
                &kp LCTRL            &tda       &kp S        &kp D        &kp F      &kp G    &kp H  &kp J     &kp K     &kp L      &semi_morph  &kp RET
                &esc_shift LSHFT ESC &kp LSHFT  &kp Z        &kp X        &kp C      &kp V    &kp B  &kp N     &kp M     &c_m       &kp DOT      &kp RIGHT
                &kp LALT             &kp LGUI   &lt 1 SPACE  &lt 2 SPACE  &kp RCTRL  &kp RALT
            >;
        };

        lower_layer {
            // ----------------------------------    ----------------------------------------
            // |  TAB  |  &  |  `  |  '  |  "  |     |  7  |  8  |  9  |      |      | BKSP |
            // |  ESC  |     |     |     |     |     |  4  |  5  |  6  |      | UP   |      | 
            // | SHFT  |     |     |     |     |     |  1  |  2  |  3  | LEFT | DOWN | RGT  |
            //               |     |     | SPC |     |  0  |  0  |     |
            bindings = <
                &kp TAB    &kp AMPS  &kp GRAVE  &kp SQT    &kp DQT    &trans    &kp KP_N7  &kp KP_N8  &kp KP_N9  &trans    &trans    &kp BSPC
                &kp ESC    &trans    &trans     &trans     &trans     &trans    &kp KP_N4  &kp KP_N5  &kp KP_N6  &trans    &kp UP    &trans
                &kp LSHFT  &trans    &trans     &trans     &trans     &trans    &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp LEFT  &kp DOWN  &kp RIGHT
                &trans     &trans    &trans     &kp KP_N0  &kp KP_N0  &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  ?  |  ^  |  !  |  #  |  ~  |   |  *  |  _  |  (  |  )  |  %  | BKSP |
            // | CTRL |  @  |  $  |     |     |     |   |  -  |  +  |  [  |  ]  |  /  |  `   |
            // | SHFT |     |     | BT0 |  ^  |     |   |  \  |  =  |  {  |  }  | "|" |  &   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |
            bindings = <
                &kp TAB     &kp QMARK      &kp CARET  &kp EXCL      &kp HASH   &kp TILDE       &kp KP_MULTIPLY  &kp UNDER  &kp LPAR  &kp RPAR  &kp PRCNT  &kp BSPC
                &kp LCTRL   &kp AT         &kp DLLR   &trans        &trans     &trans          &kp MINUS        &kp PLUS   &kp LBKT  &kp RBKT  &kp FSLH   &kp GRAVE
                &kp LSHFT   &trans         &trans     &bt BT_SEL 0  &kp CARET  &trans          &kp BLSH         &tdeq      &kp LBRC  &kp RBRC  &kp PIPE   &kp AMPS
                &trans      &trans         &trans     &trans        &trans     &trans
            >;
        };
    };
};
